install.packages(c("ggthemes", "janitor", "plotly", "skimr", "vroom"))
{library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(skimr)
library(scales)}
Drive <- vroom("C:\\Users\\TANTAN\\Desktop\\eng317.csv")
theme_set(ggthemes::theme_clean())
factors <- c("group", "ranking", "alert", "gender","accident", "group")
numerics <- c("log_co2_1", "log_acc_1", "log_gasoline_1", "log_deacc_1")
Drive_clean <- Drive %>%
janitor::clean_names() %>%# get rid of some `` and underscore problems
rename(license = license_plate_number) %>%
mutate(license = na_if(license, "1.22E+16"),
log_co2_1 = na_if(log_co2_1, "#NULL!"),
log_acc_1 = na_if(log_acc_1, "#NULL!"),
log_gasoline_1 = na_if(log_gasoline_1, "#NULL!"),
log_deacc_1 = na_if(log_deacc_1, "#NULL!")) %>%
filter(!is.na(license)) %>% # without license plate no car identifier
transform(driver_id = as.numeric(factor(license))) %>% # add id column
mutate(group = str_extract(group, '(?<=^.{1}).')) %>%
mutate(date = lubridate::mdy(date)) %>% # convert to Date type
mutate(across(all_of(factors), as.factor)) %>%
mutate(across(all_of(numerics), as.numeric)) %>%
relocate(where(is.numeric), .after = where(is.character)) %>%
relocate(starts_with("log"), .after = last_col()) %>%
relocate(driver_id, .before = 1) %>%
relocate(driving_score, .before = 1) %>% # independent variable readability
relocate(date, .after = 2)
Drive_driving_score <- Drive_clean %>%
filter(driving_score > 0.00 & !driving_score == 100.00) # not stationary
Drive_moved <- Drive_clean %>%
filter(mileage > 0)
Drive_mileage_group <- Drive_clean %>%
mutate(km_group = case_when(total_mileage > 0 & total_mileage <= 850 ~ 1,
total_mileage > 850 & total_mileage <= 7500 ~ 2,
total_mileage > 7500 & total_mileage <= 15000 ~ 3,
total_mileage > 15000 & total_mileage <= 26000 ~ 4,
total_mileage > 26000 ~ 5,
TRUE ~ NA_real_))
Drive_Anhui <- Drive_clean %>%
filter(str_detect(license, "皖"))
Drive_Anhui_demographic <- Drive_Anhui %>%
select(group, license, age, gender, driving_experience, accident) %>%
group_by(license) %>%
distinct(license, .keep_all = TRUE) %>%
na.omit() # some drivers' demographic wasn't recorded
Drive_Anhui_mileage <- Drive_Anhui %>%
# filter(app_usage == 1) %>%
group_by(license) %>%
# filter(total_mileage < 150000) %>%
select(total_mileage, license) %>%
summarise(max = max(total_mileage))# decide a cutoff
skimr::skim(Drive_clean)
max(Drive_clean$rapid_acceleration)
max(Drive_clean$driving_experience, na.rm = T)
Drive_driving_score %>%
ggplot(aes(x = driving_score, fill = gender)) +
geom_histogram(bins = 25) +
facet_wrap(~gender)
Drive_driving_score %>%
filter(age > 0) %>%
na.omit() %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 1)
plotly::ggplotly(
Drive_clean %>%
filter(age > 0) %>%
na.omit() %>%
ggplot(aes(x = age)) +
geom_density() +
scale_x_continuous(limits = c(20,60), breaks=seq(20,60,5)) +
ggtitle("Age density of drivers with known demographic") +
xlab("Age") +
ylab("Density")
)
Drive_moved %>%
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
# >>> seems to be general trend of more rapid accelerations is relat
Accel_Deaccl_zoom <- function(df, acc, deacc){
if (length(acc) >= 2 ) {
acc_low <- acc[1]
acc_high <- acc[2]
}
if (length(deacc) >= 2 ) {
deacc_low <- deacc[1]
deacc_high <- deacc[2]
}
if (exists("acc_high") & exists("acc_high")) {
if (sum(acc_high, acc_low, deacc_high, deacc_low) < 100) {
df %>%
filter(mileage > 0) %>%
filter(rapid_acceleration >= acc_low & rapid_acceleration <= acc_high) %>%
filter(rapid_deacceleration >= deacc_low & rapid_deacceleration <= deacc_high) %>%
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_jitter(width = 0.25)
} else
df %>%
filter(mileage > 0) %>%
filter(rapid_acceleration >= acc_low & rapid_acceleration <= acc_high) %>%
filter(rapid_deacceleration >= deacc_low & rapid_deacceleration <= deacc_high) %>%
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_jitter(width = 0.15)
} else
df %>%
filter(rapid_acceleration <= acc &
rapid_deacceleration <= deacc) %>%
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_jitter(width = 0.3)
}
Accel_Deaccl_zoom(Drive_moved, c(0,5), c(0,10))
Accel_Deaccl_zoom(Drive_moved, 100,100)
# >>> for a given driver, rapid acceleration does not mean also tends to rapidly deaccelerate
Accel_Deaccl_zoom(Drive_moved, c(50,300), c(25, 500))
plotly::ggplotly(
Drive_Anhui %>%
filter(mileage > 0) %>%
select(license, rapid_acceleration, rapid_deacceleration, date) %>%
mutate(month = month(date)) %>%
group_by(license) %>%
filter(n() > 50 & rapid_acceleration < 500) %>%
# at least 30 data points over the year
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_point(mapping = aes(color = month))  +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
facet_wrap(~license)
)
Drive_clean %>%
filter(!mileage == 0 & mileage < 100) %>% # decide a cutoff
ggplot(aes(x = mileage)) +
geom_histogram(bins = 50)
### TODO: decide cutoff for mileage on a day
Drive_clean %>%
filter(!mileage == 0 & mileage < 3) %>%
ggplot(aes(x = mileage)) +
geom_histogram(bins = 50)
# number of trips less than 1 km on a day
Drive_clean %>%
filter(!mileage == 0 & mileage < 1) %>%
nrow()
avg_anhui_mileage <- mean(Drive_Anhui_mileage$max)
How far did the drivers with known demographics drive between June and October?
Drive_Anhui_mileage %>%
ggplot(aes(x = fct_reorder(license, max), y = max)) +
geom_col() +
geom_hline(yintercept = avg_anhui_mileage) +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
ylab("Car mileage (June 2019 - Oct 2020)") +
xlab("License plate number") +
ggtitle("Total mileage per respondent with known demographic") +
theme(plot.title = element_text(hjust = .5))
# How far did the drivers with known demographics drive between June and October?
Drive_Anhui_mileage %>%
ggplot(aes(x = fct_reorder(license, max), y = max)) +
geom_col() +
geom_hline(yintercept = avg_anhui_mileage) +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
ylab("Car mileage (June 2019 - Oct 2020)") +
xlab("License plate number") +
ggtitle("Total mileage per respondent with known demographic") +
theme(plot.title = element_text(hjust = .5))
Drive_Anhui_demographic %>%
ggplot(aes(x = age, y = driving_experience)) +
geom_point() +
geom_smooth(method = "loess", formula = y ~ x)
# >>> driving experience seems very low
### TODO: perhaps counted since started working for taxi company?
# >>> accident is the truth number of accidents??
Drive_clean %>%
select_if(~class(.x) == "numeric") %>%
select(!starts_with("log"),
-age,
-driving_experience,
-app_usage,
-driver_id) %>%
cor() %>%
corrplot::corrplot(method = "number", type = "upper")
{library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(skimr)
library(scales)}
Drive_clean %>%
select_if(~class(.x) == "numeric") %>%
select(!starts_with("log"),
-age,
-driving_experience,
-app_usage,
-driver_id) %>%
cor() %>%
corrplot::corrplot(method = "number", type = "upper")
Drive_Anhui %>%
select_if(~class(.x) == "numeric") %>%
select(!starts_with("log"),
-age,
-driving_experience,
-app_usage,
-driver_id) %>%
cor() %>%
corrplot::corrplot(method = "number", type = "upper")
{library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(skimr)
library(scales)}
Drive_Anhui <- Drive_clean %>%
filter(str_detect(license, "皖"))
Drive_Anhui %>%
select_if(~class(.x) == "numeric") %>%
select(!starts_with("log"),
-age,
-driving_experience,
-app_usage,
-driver_id) %>%
cor() %>%
corrplot::corrplot(method = "number", type = "upper")
Drive_Anhui %>%
mutate(month = month(date)) %>%# Anhui plate
# filter(app_usage == 1) %>%
group_by(license, month) %>%
# filter(total_mileage < 150000) %>%
select(total_mileage, mileage, license, month) %>%
summarise(mileage = sum(mileage)) %>% # decide a cutoff
ggplot(aes(x = fct_reorder(license, mileage), y = mileage, fill = month)) +
geom_col() +
coord_flip() +
ylab("Car mileage (June 2019 - Oct 2020)") +
xlab("License plate number") +
ggtitle("Total mileage per respondent with known demographic") +
theme(plot.title = element_text(hjust = .5))
library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(scales)
Drive <- vroom("C:\\Users\\D\\Desktop\\Drive317.csv")
library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(scales)
Drive <- vroom("eng317.csv")
factors <- c("group", "ranking", "alert", "gender","accident", "group", "app_usage")
numerics <- c("log_co2_1", "log_acc_1", "log_gasoline_1", "log_deacc_1")
Drive_clean <- Drive %>%
janitor::clean_names() %>%# get rid of some `` and underscore problems
rename(license = license_plate_number) %>%
mutate(license = na_if(license, "1.22E+16"),
log_co2_1 = na_if(log_co2_1, "#NULL!"),
log_acc_1 = na_if(log_acc_1, "#NULL!"),
log_gasoline_1 = na_if(log_gasoline_1, "#NULL!"),
log_deacc_1 = na_if(log_deacc_1, "#NULL!")) %>%
filter(!is.na(license)) %>% # without license plate no car identifier
transform(driver_id = as.numeric(factor(license))) %>% # add id column
mutate(group = str_extract(group, '(?<=^.{1}).')) %>%
mutate(date = lubridate::mdy(date)) %>% # convert to Date type
mutate(across(all_of(factors), as.factor)) %>%
mutate(across(all_of(numerics), as.numeric)) %>%
relocate(where(is.numeric), .after = where(is.character)) %>%
relocate(starts_with("log"), .after = last_col()) %>%
relocate(driver_id, .before = 1) %>%
relocate(driving_score, .before = 2) %>% # research focus near the front
relocate(date, .after = 2) %>%
relocate(app_usage, .before = 2) # dependent variable at the front
Drive_Anhui <- Drive_clean %>%
filter(str_detect(license, "皖"))
plotly::ggplotly( # For some reasons doesn't knit, but executes fine
Drive_Anhui %>%
filter(mileage > 0) %>%
select(license, rapid_acceleration, rapid_deacceleration, date) %>%
mutate(month = month(date)) %>%
group_by(license) %>%
filter(n() > 50 & rapid_acceleration < 500) %>%
# at least 30 data points over the year
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_point(mapping = aes(color = month))  +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
facet_wrap(~license) +
ggtitle("Threshold-measurement based profiling: Acceleration vs Deacceleration") +
xlab("Rapid acceleration penalty count") +
ylab("Rapid deacceleration penalty count")
)
library(vroom)
library(tidyverse)
library(janitor)
library(lubridate)
library(scales)
Drive <- vroom("eng317.csv")
factors <- c("group", "ranking", "alert", "gender","accident", "group", "app_usage")
numerics <- c("log_co2_1", "log_acc_1", "log_gasoline_1", "log_deacc_1")
Drive_clean <- Drive %>%
janitor::clean_names() %>%# get rid of some `` and underscore problems
rename(license = license_plate_number) %>%
mutate(license = na_if(license, "1.22E+16"),
log_co2_1 = na_if(log_co2_1, "#NULL!"),
log_acc_1 = na_if(log_acc_1, "#NULL!"),
log_gasoline_1 = na_if(log_gasoline_1, "#NULL!"),
log_deacc_1 = na_if(log_deacc_1, "#NULL!")) %>%
filter(!is.na(license)) %>% # without license plate no car identifier
transform(driver_id = as.numeric(factor(license))) %>% # add id column
mutate(group = str_extract(group, '(?<=^.{1}).')) %>%
mutate(date = lubridate::mdy(date)) %>% # convert to Date type
mutate(across(all_of(factors), as.factor)) %>%
mutate(across(all_of(numerics), as.numeric)) %>%
relocate(where(is.numeric), .after = where(is.character)) %>%
relocate(starts_with("log"), .after = last_col()) %>%
relocate(driver_id, .before = 1) %>%
relocate(driving_score, .before = 2) %>% # research focus near the front
relocate(date, .after = 2) %>%
relocate(app_usage, .before = 2) # dependent variable at the front
Drive_Anhui <- Drive_clean %>%
filter(str_detect(license, "皖"))
plotly::ggplotly( # For some reasons doesn't knit, but executes fine
Drive_Anhui %>%
filter(mileage > 0) %>%
select(license, rapid_acceleration, rapid_deacceleration, date) %>%
mutate(month = month(date)) %>%
group_by(license) %>%
filter(n() > 50 & rapid_acceleration < 500) %>%
# at least 30 data points over the year
ggplot(aes(x=rapid_acceleration, y=rapid_deacceleration)) +
geom_point(mapping = aes(color = month))  +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
facet_wrap(~license) +
ggtitle("Threshold-measurement based profiling: Acceleration vs Deacceleration") +
xlab("Rapid acceleration penalty count") +
ylab("Rapid deacceleration penalty count")
)
ggplotly(plot)
library("knitr")
library("devtools")
#devtools::install_github("plotly/R-api")
# Load Plot.ly
library(plotly)
#response = signup (username = 'tan', email= '2399794167@qq.com')
#p <- plotly(username = "tanxinyu", key = "ua4WmUbui1S6Rzhf3oyZ")
#Sys.setenv("plotly_username"="tanxinyu")
# plotly_api_key在个人设置页面的左下角的api keys中
#Sys.setenv("plotly_api_key"="ua4WmUbui1S6Rzhf3oyZ")
# Create Dummy Data
x <- seq.Date(from = as.Date("2014-05-01"), to = as.Date("2014-05-20"), by = "day")
x <- as.character(as.Date(x, format = "%Y%m%d"), "%Y-%m-%d %H:%M:%S")
y1 <- c(15000, 20000, 25000, 22000, 30000, 32000, 29000, 30000, 26000, 29000,
15000, 20000, 25000, 22000, 30000, 32000, 29000, 30000, 26000, 29000)
y2 <- c(25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000,
25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000)
# Build Plotly Traces From Dummy Data
revenue <- list(x = x, y = y1, type = "bar", name = "Revenue")
target <- list(x = x, y = y2, type = "scatter", name = "Target")
# Build Data Frame
df <- data.frame(x, y1, y2)
df$day <- seq(from = 1, to = 20, by = 1)
colnames(df) <- c("date", "revenue", "target", "day")
# Melt Data
library(reshape2)
df$date <- NULL
df.l <- melt(df, id.vars = c("day"))
colnames(df.l) <- c("day", "segment", "revenue")
# Load ggplot2 package
library(ggplot2)
# Build Plot
plot <- ggplot(df.l, aes(day, revenue, group = segment, color = segment)) +
geom_line()
# Show Plot
plot
ggplotly(plot)
library("knitr")
library("devtools")
#devtools::install_github("plotly/R-api")
# Load Plot.ly
library(plotly)
#response = signup (username = 'tan', email= '2399794167@qq.com')
#p <- plotly(username = "tanxinyu", key = "ua4WmUbui1S6Rzhf3oyZ")
#Sys.setenv("plotly_username"="tanxinyu")
# plotly_api_key在个人设置页面的左下角的api keys中
#Sys.setenv("plotly_api_key"="ua4WmUbui1S6Rzhf3oyZ")
# Create Dummy Data
x <- seq.Date(from = as.Date("2014-05-01"), to = as.Date("2014-05-20"), by = "day")
x <- as.character(as.Date(x, format = "%Y%m%d"), "%Y-%m-%d %H:%M:%S")
y1 <- c(15000, 20000, 25000, 22000, 30000, 32000, 29000, 30000, 26000, 29000,
15000, 20000, 25000, 22000, 30000, 32000, 29000, 30000, 26000, 29000)
y2 <- c(25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000,
25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000)
# Build Plotly Traces From Dummy Data
revenue <- list(x = x, y = y1, type = "bar", name = "Revenue")
target <- list(x = x, y = y2, type = "scatter", name = "Target")
# Build Data Frame
df <- data.frame(x, y1, y2)
df$day <- seq(from = 1, to = 20, by = 1)
colnames(df) <- c("date", "revenue", "target", "day")
# Melt Data
library(reshape2)
df$date <- NULL
df.l <- melt(df, id.vars = c("day"))
colnames(df.l) <- c("day", "segment", "revenue")
# Load ggplot2 package
library(ggplot2)
# Build Plot
plot <- ggplot(df.l, aes(day, revenue, group = segment, color = segment)) +
geom_line()
# Show Plot
plot
ggplotly(plot)
Sys.getlocale()
